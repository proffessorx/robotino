<!DOCTYPE HTML>
<html>
<head>
   <title>Programmierung &gt; Eigene Funktionsblöcke &gt; Vorbereiten der Entwicklungsumgebung</title>
   <meta name="generator" content="Help & Manual">
   <meta name="keywords" content="">
   <meta name="description" content="Vorbereiten der Entwicklungsumgebung">
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   <meta http-equiv="X-UA-Compatible" content="IE=edge" />
   <link type="text/css" href="default.css" rel="stylesheet">
   <link type="text/css" href="custom.css" rel="stylesheet">
   <script type="text/javascript" src="nsh.js"></script>

<script type="text/javascript">   
// Toggle Toggler 

var toggleCount=false;
var switchState;

function toggleToggles() {

    if (!toggleCount) {
     toggleCount = true;
     HMToggleExpandAll(true);
     switchState = true;
     }
   
     else if (switchState) {
        HMToggleExpandAll(false);
        switchState = false;
        }
        
     else  {
        HMToggleExpandAll(true);
        switchState = true;
        } 
    }
</script>
   
<!-- non-scrolling headers for CHM and browser-based help, local styles-->
<style type="text/css" media="screen"> 
html, body { margin:0; 
   padding:0; 
   overflow: hidden; 
   background: #FFFFFF; 
  }
 
div#printheader { 
   display: none;
   padding-bottom: 10px;
   }
   #idheader { 
      width:100%; 
      height:auto; 
      padding: 0; 
      margin: 0; 
} 
    #idheaderbg  {
    background: #6F6F6F; 
}
   #callout-table, #overview-table {display:block; position:relative; top:0; left:0;}
   #callout-icon {display:block; position:absolute; top:-11px; left:-11px;}
   #callout-icon-flag {display:block; position:absolute; top:-11px; left:-8px;}
   #callout-table a {text-decoration: none; color: blue;}
   #callout-table a:visited {text-decoration: none; color: blue;}
   #overview-table a {text-decoration: none; color: black;}
   #overview-table a:visited {text-decoration: none; color: black;}
   #callout-table a:hover, #overview-table a:hover {text-decoration: underline;}
   p.help-url { margin: 20px 0 5px 0; text-align: center; font-size: 80%; text-decoration: none }
   .sync-toc { color: #ffffff; font-size: 8pt; font-weight: bold; display: none; }
   .sync-toc a { color: #ffffff; text-decoration: none; font-weight: bold;}
   .sync-toc a:visited { color: #ffffff; }
   .sync-toc a:hover { text-decoration: underline; }
   </style>
<!--[if lt IE 7]>
<style type="text/css">
  #idcontent {padding: 0px;} 
  #innerdiv {padding: 10px 5px 5px 10px ;} 
</style> 
<![endif]-->
<noscript>
<style type="text/css">
html, body { overflow: auto; }
</style> 
</noscript>
<style type="text/css" media="print">
span.f_Heading1 { color: black; }
#idheader, #printheader img { display:none; }
#printheader { display: block; margin-top: 20px; }
#idcontent { margin-top: 10px; }
</style>   
   <script type="text/javascript" src="jquery.js"></script>
   <script type="text/javascript" src="helpman_settings.js"></script>
   <script type="text/javascript" src="helpman_topicinit.js"></script>

   <script type="text/javascript">
     HMSyncTOC("index.html", "programming_myfunctionblocks_preparation.htm");
   </script>
   <script type="text/javascript" src="highlight.js"></script>
   <script type="text/javascript">
     $(document).ready(function(){highlight();});
   </script>
</head>
<body>
<!--ZOOMSTOP-->


<div id="printheader"><h1 class="p_Heading1"><span class="f_Heading1">Vorbereiten der Entwicklungsumgebung</span></h1>
</div> 
<div id="idheader">
<div id="idheaderbg">
<table width="100%" border="0" cellspacing="0" cellpadding="0" 
       style="margin: 0px; background: url(header_bg.jpg);">

  <tr valign="bottom">
    <td align="left" valign="bottom" class="topichead">
   <p class="sync-toc">&lt;&lt; <a rel="nofollow" href="index.html?programming_myfunctionblocks_preparation.htm" target="_top">Click to Display Table of Contents</a> &gt;&gt;</p>
   <p class="crumbs" id="idnav"><b>Navigation:</b>&nbsp;
   
   <a href="programming.htm">Programmierung</a> &gt; <a href="programming_myfunctionblocks.htm">Eigene Funktionsblöcke</a>&nbsp;&gt;</p>
   <h1 class="p_Heading1"><span class="f_Heading1">Vorbereiten der Entwicklungsumgebung</span></h1>

    </td>
    <td align="right" width="120" valign="middle" class="topichead" id="idnav">
    
     <a href="programming_myfunctionblocks.htm"
        onmouseover="document.images.prev.src='btn_prev_h.gif'" 
        onmouseout="document.images.prev.src='btn_prev_n.gif'"
        ><img name=prev src="btn_prev_n.gif" border=0 alt="Previous page"
        ></a><a href="programming_myfunctionblocks.htm"
        onmouseover="document.images.main.src='btn_home_h.gif'" 
        onmouseout="document.images.main.src='btn_home_n.gif'"><img name=main src="btn_home_n.gif" border=0 alt="Return to chapter overview"
        ></a><a href="programming_myfunctionblocks_newblock.htm"
        onmouseover="document.images.next.src='btn_next_h.gif'" 
        onmouseout="document.images.next.src='btn_next_n.gif'"><img name=next src="btn_next_n.gif" border=0 alt="Next page"
        ></a>
    </td>
  </tr>
  <tr><td colspan="2" style="height: 3px; background: url(header_bg_shadow.gif)"></td></tr>
</table>
</div>

<!-- The following code displays Expand All/Collapse All links  below the header in topics containing toggles -->
  

</div>  



<div id="idcontent"><div id="innerdiv"> 
<!--ZOOMRESTART-->
<p>Zum Übersetzen eines Funktionsblocks kann jede neuere Version von Microsoft Visual C++ verwendet werden. Auch der Einsatz der kostenlosen Express-Variante ist ohne Probleme möglich.</p>
<p>Um einen Funktionsblock übersetzen zu können, muss zunächst ein Visual C++ Projekt angelegt werden. Dazu ist im Robotino® View API das Tool <span style="font-weight: bold;">CMake</span> enthalten, das aus zuvor angelegten Skripten die Projektdateien erstellt. Die beiden mitgelieferten Beispiele (Übung 1 und Übung 2) enthalten bereits solche Skripte.</p>
<p>Zunächst wird CMake gestartet.</p>
<p><img src="run_cmake.png" width="411" height="517" alt="run_cmake" style="width:411px;height:517px;border:none" /></p>
<p>In CMake müssen anschließend der Pfad zu den Quelldateien des Funktionsblocks (im Beispiel Tutorial1 des Benutzers &quot;verbeek&quot;) sowie der Pfad zu einem (möglichst leeren) Arbeitsverzeichnis (im Beispiel &quot;c:\temp\tutorial1&quot;) gesetzt werden. Durch anklicken von &quot;Configure&quot; wird der Erstellungsprozess gestartet.</p>
<p><img src="cmake_create_dir.png" width="934" height="718" alt="cmake_create_dir" style="width:934px;height:718px;border:none" /></p>
<p>Wählen Sie nun die gewünschte Entwicklungsumgebung. Hier wird Visual Studio 2013 ausgewählt.</p>
<p><img src="cmake_select_generator.png" width="934" height="718" alt="cmake_select_generator" style="width:934px;height:718px;border:none" /></p>
<p>Durch anklicken von &quot;Generate&quot; wird schließlich die Visual Studio Solution Datei erzeugt.</p>
<p><img src="cmake_generate.png" width="934" height="718" alt="cmake_generate" style="width:934px;height:718px;border:none" /></p>
<p>Gehen Sie nun mit dem Windows-Explorer in das Build-Verzeichnis (c:/temp/tutorial1) und doppelklicken die Solution.</p>
<p><img src="run_solution.png" width="890" height="721" alt="run_solution" style="width:890px;height:721px;border:none" /></p>
<p>Erstellen Sie den Funktionsblock. Wie Sie sehen, haben wir vorher eine Änderung am Quellcode vorgenommen, so dass wir gleich merken, ob wirklich unser neu gebauter Funktionsblock verwendet wird.</p>
<p><img src="vs_rebuild.png" width="1141" height="816" alt="vs_rebuild" style="width:1141px;height:816px;border:none" /></p>
<p>Sie können Ihren Funktionsblock debuggen, in dem Sie Robotino View als ausführendes Programm bekannt machen.</p>
<p><img src="vs_config_debugging.png" width="1141" height="816" alt="vs_config_debugging" style="width:1141px;height:816px;border:none" /></p>
<p>Nun starten Sie den Debug-Prozess.</p>
<p><img src="vs_start_debugging.png" width="1141" height="816" alt="vs_start_debugging" style="width:1141px;height:816px;border:none" /></p>
<p>Robotino View wird gestartet. Erstellen Sie ein kleines Programm, das Ihren Funktionsblock verwendet.</p>
<p><img src="robotinoview_debugging.png" width="1165" height="1347" alt="robotinoview_debugging" style="width:1165px;height:1347px;border:none" /></p>
<p>An der Ausgabe von T1 sehen Sie, dass die am Quellcode vorgenommenen Veränderungen kompiliert wurden. Setzen Sie einen Breakpoint im Quellcode. Damit die step() Funktion ausgeführt wird, muss sich der Eingangswert des Funktionsblock verändern. Klicken Sie dazu auf einen Pfeil innerhalb der Konstante, um den Wert zu erhöhen bzw. zu erniedrigen. Das Programm stoppt an dem Breakpoint.</p>
<p><img src="vs_set_breakpoint.png" width="1150" height="1339" alt="vs_set_breakpoint" style="width:1150px;height:1339px;border:none" /></p>

<!--ZOOMSTOP-->
</div></div>
<script type="text/javascript">

var lastSlashPos = document.URL.lastIndexOf("/") > document.URL.lastIndexOf("\\") ? document.URL.lastIndexOf("/") : document.URL.lastIndexOf("\\");
if( document.URL.substring(lastSlashPos + 1, lastSlashPos + 4).toLowerCase() != "~hh" )
{
 if (document.all) setTimeout(function() {nsrInit();},20); 
    else nsrInit();
 } 

if ((!parent.hmNavigationFrame) && (parent.location) && (parent.location.href)) { $('.sync-toc').show();$('p.crumbs').hide();}

</script>
</body>
</html>









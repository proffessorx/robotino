<!DOCTYPE HTML>
<html>
<head>
   <title>Preparing the build environment</title>
   <meta name="generator" content="Help &amp; Manual" />
   <meta name="keywords" content="" />
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
   <meta http-equiv="Content-Style-Type" content="text/css" />
   <link type="text/css" href="default.css" rel="stylesheet" />
<style type="text/css"> 
a { color: #0000FF; text-decoration: underline } 
a:visited {color: #0000FF } 
a:hover {color: #E4641C; text-decoration: underline } 
a.weblink {color: #0000FF; text-decoration: underline } 
a.weblink:visited {color: #0000FF} 
a.weblink:hover {color: #E4641C } 
a.popuplink {color: #FF0000; text-decoration: none} 
a.popuplink:visited {color: #FF0000} 
a.popuplink:hover {color: #FF0000; text-decoration: underline} 
a.filelink {color: #04BC14; text-decoration: none} 
a.filelink:visited {color: #04BC14} 
a.filelink:hover {color: #04BC14; text-decoration: underline} 
</style> 
<script type="text/javascript">
function ModelHandler(o1, o2)
  {
  if (document.hhctrl) document.hhctrl.outerHTML = ""; var X, Y, sl, a, ra, dir, ap, chmPath;
  ra = /::/; a = location.href.search(ra);   ra = /:/; a = location.href.search(ra);
  if (a == 2) X = 14; else X = 7; sl = "\\"; Y = location.href.lastIndexOf(sl);
  dir = location.href.substring(X, Y); ap = unescape(dir) + "\\Tools\\ModelHandler.exe";
  ShortCut = "<object id='hhctrl' classid='clsid:adb880a6-d8ff-11cf-9377-00aa003b7a11'><param name='Command' value='ShortCut'><param name='Item1' value=',"+ap+", "+o1+" "+"\""+o2+"\""+"'></object>";
  document.body.insertAdjacentHTML("BeforeBegin", ShortCut); document.hhctrl.hhclick();
  }
</script>
   <script type="text/javascript" src="jquery.js"></script>
   <script type="text/javascript" src="helpman_settings.js"></script>
   <script type="text/javascript" src="helpman_topicinit.js"></script>

   <script type="text/javascript">
     HMSyncTOC("index.html", "programming_myfunctionblocks_preparation.htm");
   </script>
   <script type="text/javascript" src="highlight.js"></script>
   <script type="text/javascript">
     $(document).ready(function(){highlight();});
   </script>
</head>
<SCRIPT Language="JScript">
function parser(fn)
{
	var X, Y, sl, a, ra, link;
	ra = /:/;
	a = location.href.search(ra);
	if (a == 2)
		X = 14;
	else
		X = 7;
	sl = "\\";
	Y = location.href.lastIndexOf(sl) + 1;
	link = 'file:///' + location.href.substring(X, Y) + fn;
	location.href = link;
}
</SCRIPT>
<body style="margin: 0px 0px 0px 0px; background: #FFFFFF;">

<table width="100%" border="0" cellspacing="0" cellpadding="5" bgcolor="#EBEBEB">
  <tr valign="middle">
    <td align="left">
      &nbsp;</td>
    <td align="right">
		<img border=0 src="festo_logo.bmp" 

align="right"></td>
   </tr>
  <tr valign="middle">
    <td align="left">
      <h1 class="p_Heading1"><span class="f_Heading1">Preparing the build environment</span></h1>

    </td>
    <td align="right">
     <span style="font-size: 9pt">
     <a href="programming_myfunctionblocks.htm"><img border=0 src="navigationprev.bmp" alt="Previous"></a>&nbsp;
     <a href="welcome.htm"><img border=0 src="navigationhome.bmp" alt="home"></a>&nbsp;
     <a href="programming_myfunctionblocks_newblock.htm"><img border=0 src="navigationnext.bmp" alt="Next"></a>
     &nbsp;&nbsp;
     </span>
    </td>
   </tr>
</table>
<table width="100%" border="0" cellspacing="0" bgcolor="#EBEBEB">
  <td style="padding-right:5; padding-left:5; padding-top:0; padding-bottom:0;"><img width=100% height=2 src="navigationline.bmp"></td>
</table>

<!-- Placeholder for topic body. -->
<table width="100%" border="0" cellspacing="0" cellpadding="5"><tr valign="middle"><td 

align="left">
<p>To compile a function blick every newer version of Microsoft Visual C++ can be used. It is even possible to use the free Express version without any problems.</p>
<p>To compile a function block a Visual C++ project has to be created first. For that purpose, the Robotino® View API contains the tool <span style="font-weight: bold;">CMake</span> which creates the project files from scripts that have been written before. Both examples (Tutorial 1 and Tutorial 2) already contain such scripts.</p>
<p>First of all start CMake.</p>
<p><img src="run_cmake.png" width="411" height="517" alt="run_cmake" style="width:411px;height:517px;border:none" /></p>
<p>In CMake the path to the function block's source files (in the example it is Tutorial1 of the user &quot;user&quot;) and the path to a (empty) working directory (in the example it is &quot;c:\temp\tutorial1&quot;) must be specified. Click &quot;Configure&quot; to start the process of generating the build scripts.</p>
<p><img src="cmake_create_dir.png" width="934" height="718" alt="cmake_create_dir" style="width:934px;height:718px;border:none" /></p>
<p>Now chose your development environment (here Visual Studio 2013).</p>
<p><img src="cmake_select_generator.png" width="934" height="718" alt="cmake_select_generator" style="width:934px;height:718px;border:none" /></p>
<p>Click &quot;Generate&quot; to create the Visual Studio Solution file in c:/temp/tutorial1.</p>
<p><img src="cmake_generate.png" width="934" height="718" alt="cmake_generate" style="width:934px;height:718px;border:none" /></p>
<p>Use Windows-Explorer to navigate to the build directory c:/temp/tutorial1 and double-click the Solution file.</p>
<p><img src="run_solution.png" width="890" height="721" alt="run_solution" style="width:890px;height:721px;border:none" /></p>
<p>Now build your function block. As you can see we modified the source code. By this we have a hint that our compiled function block is loaded.</p>
<p><img src="vs_rebuild.png" width="1141" height="816" alt="vs_rebuild" style="width:1141px;height:816px;border:none" /></p>
<p>Tell Visual Studio about Robotino View so that you can debug your function block.</p>
<p><img src="vs_config_debugging.png" width="1141" height="816" alt="vs_config_debugging" style="width:1141px;height:816px;border:none" /></p>
<p>Start the debugging process.</p>
<p><img src="vs_start_debugging.png" width="1141" height="816" alt="vs_start_debugging" style="width:1141px;height:816px;border:none" /></p>
<p>Robotino View is started. Create a small program that uses your function block.</p>
<p><img src="robotinoview_debugging.png" width="1165" height="1347" alt="robotinoview_debugging" style="width:1165px;height:1347px;border:none" /></p>
<p>The function block's output shows that our source code modifications have been compiled and that our function block is loaded correctly. Set a break-point into the source code. To execute the step() function the function blocks input has to be modified. When doing so that program stops at the break-point.</p>
<p><img src="vs_set_breakpoint.png" width="1150" height="1339" alt="vs_set_breakpoint" style="width:1150px;height:1339px;border:none" /></p>

</td></tr></table>

</body>
</html>

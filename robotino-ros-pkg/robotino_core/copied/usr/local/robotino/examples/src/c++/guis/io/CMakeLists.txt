cmake_minimum_required(VERSION 2.6)

SET(
	NAME
	example_gui_io
)

PROJECT( ${NAME} )

IF( WIN32 )
	IF( CMAKE_SIZEOF_VOID_P EQUAL 8 )
		STRING( REPLACE "\\" "/" ROBOTINOAPI2_DIR "$ENV{ROBOTINOAPI2_64_DIR}" )
	ELSE( CMAKE_SIZEOF_VOID_P EQUAL 8 )
		STRING( REPLACE "\\" "/" ROBOTINOAPI2_DIR "$ENV{ROBOTINOAPI2_32_DIR}" )
	ENDIF( CMAKE_SIZEOF_VOID_P EQUAL 8 )
ELSE( WIN32 )
		STRING( REPLACE "\\" "/" ROBOTINOAPI2_DIR "$ENV{ROBOTINOAPI2_DIR}" )
ENDIF( WIN32 )

IF( NOT ROBOTINOAPI2_DIR )
	IF( WIN32 )
		IF( CMAKE_SIZEOF_VOID_P EQUAL 8 )
			STRING( REPLACE "\\" "/" PROGRAMS "$ENV{ProgramFiles}" )
			SET( ROBOTINOAPI2_DIR "${PROGRAMS}/REC GmbH/robotino/api2" )
		ELSE( CMAKE_SIZEOF_VOID_P EQUAL 8 )
			STRING( REPLACE "\\" "/" PROGRAMS "$ENV{ProgramFiles(x86)}" )
			SET( ROBOTINOAPI2_DIR "${PROGRAMS}/REC GmbH/robotino/api2" )
		ENDIF( CMAKE_SIZEOF_VOID_P EQUAL 8 )
	ELSE( WIN32 )
		SET( ROBOTINOAPI2_DIR "/usr/local/robotino/api2" )
	ENDIF( WIN32 )
ENDIF( NOT ROBOTINOAPI2_DIR )

SET(
	CMAKE_MODULE_PATH
	${ROBOTINOAPI2_DIR}/cmake
)
SET(
  GLOBAL_TARGET_DIR
  ${CMAKE_CURRENT_BINARY_DIR}/target
)
FILE( MAKE_DIRECTORY ${GLOBAL_TARGET_DIR} )
FILE( MAKE_DIRECTORY ${GLOBAL_TARGET_DIR}/debug )
FILE( MAKE_DIRECTORY ${GLOBAL_TARGET_DIR}/release )

IF( WIN32 )
  SET(
    CMAKE_DEBUG_POSTFIX
    "d"
  )
ENDIF( WIN32 )

SET(
  LIBRARY_OUTPUT_PATH
  ${GLOBAL_TARGET_DIR}
)
    
SET(
  EXECUTABLE_OUTPUT_PATH
  ${GLOBAL_TARGET_DIR}
)

find_package( RobotinoAPI2 REQUIRED )
COPY_ROBOTINOAPI2_DLLS( "${GLOBAL_TARGET_DIR}/release" "${GLOBAL_TARGET_DIR}/debug" )

SET( QT_USE_QTGUI 1 )
SET( QT_USE_QTNETWORK 1 )
SET( QT_USE_QTXML 1 )

find_package( Qt5Widgets )
IF( Qt5Widgets_FOUND )
	MESSAGE( "Using Qt5" )
	
	find_package( Qt5Core REQUIRED )
	find_package( Qt5Gui REQUIRED )
	find_package( Qt5Network REQUIRED )
	find_package( Qt5Xml REQUIRED )
	
	MACRO(MY_SIMPLE_WRAP_CPP )
		QT5_WRAP_CPP( ${ARGN} )
	ENDMACRO()
	
	MACRO( MY_ADD_RESOURCES )
		QT5_ADD_RESOURCES( ${ARGN} )
	ENDMACRO( MY_ADD_RESOURCES )
	
	INCLUDE_DIRECTORIES(
		${Qt5Core_INCLUDE_DIRS}
		${Qt5Gui_INCLUDE_DIRS}
		${Qt5Widgets_INCLUDE_DIRS}
		${Qt5Network_INCLUDE_DIRS}
		${Qt5Xml_INCLUDE_DIRS}
	)

	IF( WIN32 )
		SET( QT_QTMAIN_LIBRARY Qt5::WinMain )
	ENDIF()

	SET( QT_QTCORE_LIBRARY Qt5::Core )
	SET( QT_QTGUI_LIBRARY Qt5::Gui Qt5::Widgets )
	SET( QT_QTNETWORK_LIBRARY Qt5::Network )
	SET( QT_QTXML_LIBRARY Qt5::Xml )
	SET( QT_QTSVG_LIBRARY Qt5::Svg )
	SET( QT_QTWEBKIT_LIBRARY Qt5::WebKit Qt5::WebKitWidgets )
	SET( QT_QTPRINTSUPPORT_LIBRARY Qt5::PrintSupport )

	FOREACH( var ${Qt5Core_LIBRARIES} )
		SET( QT_LIBRARIES ${QT_LIBRARIES} ${var} )
	ENDFOREACH()

	FOREACH( var ${Qt5Gui_LIBRARIES} )
		SET( QT_LIBRARIES ${QT_LIBRARIES} ${var} )
	ENDFOREACH()

	FOREACH( var ${Qt5Widgets_LIBRARIES} )
		SET( QT_LIBRARIES ${QT_LIBRARIES} ${var} )
	ENDFOREACH()

	FOREACH( var ${Qt5Network_LIBRARIES} )
		SET( QT_LIBRARIES ${QT_LIBRARIES} ${var} )
	ENDFOREACH()

	FOREACH( var ${Qt5Xml_LIBRARIES} )
		SET( QT_LIBRARIES ${QT_LIBRARIES} ${var} )
	ENDFOREACH()
	
	SET(QT5_FOUND TRUE)
ELSE()
	MESSAGE( "Using Qt4" )
	find_package( Qt4 REQUIRED )
	
	MACRO (MY_SIMPLE_WRAP_CPP )
		QT4_WRAP_CPP( ${ARGN} )
	ENDMACRO (MY_WRAP_CPP)
	
	MACRO( MY_ADD_RESOURCES )
		QT4_ADD_RESOURCES( ${ARGN} )
	ENDMACRO( MY_ADD_RESOURCES files )
	
	INCLUDE_DIRECTORIES( ${QT_INCLUDE_DIR} ${QT_QTCORE_INCLUDE_DIR} ${QT_QTXML_INCLUDE_DIR} ${QT_QTNETWORK_INCLUDE_DIR} ${QT_QTGUI_INCLUDE_DIR} )
	ADD_DEFINITIONS(${QT_DEFINITIONS})
ENDIF()

IF( WIN32 )
	SET( QT4_BIN_PATH "${QT_DOC_DIR}/../bin" )
	SET( QT4_RELEASE_DLLS "${QT4_BIN_PATH}/QtCore4.dll" "${QT4_BIN_PATH}/QtGui4.dll" )
	SET( QT4_DEBUG_DLLS "${QT4_BIN_PATH}/QtCored4.dll" "${QT4_BIN_PATH}/QtGuid4.dll" )

	FOREACH( var ${QT4_RELEASE_DLLS} )
		CONFIGURE_FILE( ${var} "${GLOBAL_TARGET_DIR}/release" COPYONLY )
	ENDFOREACH( var )
	FOREACH( var ${QT4_DEBUG_DLLS} )
		CONFIGURE_FILE( ${var} "${GLOBAL_TARGET_DIR}/debug" COPYONLY )
	ENDFOREACH( var )
ENDIF( WIN32 )

SET_PROPERTY(DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS_DEBUG QT_DEBUG)
SET_PROPERTY(DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS_RELEASE QT_NO_DEBUG)
SET_PROPERTY(DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS_RELEASE QT_NO_DEBUG_OUTPUT )
SET_PROPERTY(DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS_RELEASE QT_NO_WARNING_OUTPUT )
SET_PROPERTY(DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS_RELWITHDEBINFO QT_NO_DEBUG)
SET_PROPERTY(DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS_MINSIZEREL QT_NO_DEBUG)
SET_PROPERTY(DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS_MINSIZEREL QT_NO_DEBUG_OUTPUT )
SET_PROPERTY(DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS_MINSIZEREL QT_NO_WARNING_OUTPUT )

FILE( GLOB SRCS *.cpp )
FILE( GLOB HEADER *.h )
FILE( GLOB RCCFILES *.qrc )

MY_SIMPLE_WRAP_CPP(
	MOC_SRCS
	${HEADER}
)

MY_ADD_RESOURCES(
	RCC_SRCS
	${RCCFILES}
)

IF( WIN32 )
	SET( SRCS ${SRCS} "${CMAKE_CURRENT_SOURCE_DIR}/version.rc" )
ENDIF( WIN32 )

ADD_EXECUTABLE(
	${NAME}
	WIN32
	${SRCS}
	${HEADER}
	${MOC_SRCS}
	${RCC_SRCS}
)

IF( WIN32 )
	SET_TARGET_PROPERTIES( ${NAME} PROPERTIES LINK_FLAGS "/MANIFEST:NO" )

	ADD_CUSTOM_COMMAND( TARGET ${NAME} POST_BUILD
		COMMAND "mt.exe" -manifest \"${CMAKE_CURRENT_SOURCE_DIR}\\manifest.xml\" -outputresource:"$(TargetDir)$(TargetFileName)"\;\#1
		COMMENT "Adding manifest..." )
ENDIF( WIN32 )

TARGET_LINK_LIBRARIES(
	${NAME}
	${REC_ROBOTINO_API2_LIBRARY}
	${QT_QTCORE_LIBRARY}
	${QT_QTMAIN_LIBRARY}
	${QT_QTGUI_LIBRARY}
)

SOURCE_GROUP( "Source Files" FILES ${SRCS} ${HEADER} )
SOURCE_GROUP( Moc REGULAR_EXPRESSION "(moc_|qrc_)" )
